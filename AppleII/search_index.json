[["index.html", "FPGA for 6502 and Apple II, hopefully Apple BASIC Chapter 1 前言", " FPGA for 6502 and Apple II, hopefully Apple BASIC marconi1964@yahoo.com or marconi.jiang@gmail.com 2021-08-22 Chapter 1 前言 從上一篇 FGPA for RISC-V CPU running Linux 了解 FPGA 的威力後, 也同時看到 Ben Eater 關於 6502 的介紹 - Build a 6502 computer, 對於想要跨進電子業的同學是一個非常好的入門, 跟他定了零件包, 也發現可能用一片 FPGA 就可以達到一大片麵包板的功能, 就開始了這段 FPGA 冒險之旅. 軟硬體說明: * 硬體使用 QMTech 的 Intel Altera Cyclone IV EP4CE15 Starter Kit * 環境用的是 VM Ubuntu 18.04 * IDE 是 Quartus, 用 VHDL code 為主 * VHDL 程式儲存於 github - FPGA_65c02_CPU 目前為止 github 的進度及各個 release 如下, 我的 VHDL 在 github 不同階段的 commit * 2021/07/26 - r65c02 CPU and clock source of 1Hz / 1MHz / Step * 2021/08/06 - Adding FPGA block memory as ROM $C000 - $FFFF * 2021/08/07 - Adding data buffer between ROM and CPU * 2021/08/08 - Connectoring CPU data_out and data_in with tri-state * 2021/08/08 - Modulize clock source and selection * 2021/08/21 - Adding FPGA RAM -32768-Bytes x 8 bit FGPA 容量不夠 ==&gt; 16384Bytes x 8 bits "],["-pc-apple-ii-basic.html", "Chapter 2 在 PC 網頁上 執行 Apple II BASIC ", " Chapter 2 在 PC 網頁上 執行 Apple II BASIC 用 JavaScript 網頁模擬 Apple II 記得先按螢幕上的 RESET 鍵, 才可以進入 BASIC 畫面 參考附錄 §A 有更多關於 Apple II 及 6502 CPU 更多的資源 可以參考Apple BASIC 範例程式 - 包含簡單繪圖 : "],["-6502-cpu-.html", "Chapter 3 看 6502 CPU 如何開機", " Chapter 3 看 6502 CPU 如何開機 Build an 8-bit computer from scratch - by Ben Eater Youtube - “Hello, world” from scratch on a 6502 — by Ben Eater "],["-fpga-6502-.html", "Chapter 4 用 FPGA 模擬 6502 開機 4.1 用 FPGA 模擬 6502 CPU", " Chapter 4 用 FPGA 模擬 6502 開機 進度: 100% 7/19 (2021/7/15 started) * 2021/7/15: 收到 Ben Eater 的 6502 CPU kit, 完成開機 * 2021/7/17: 下載 65C02 CPU VHDL 程式到 QMtech Cyclone IV Starter kit, 還不確定是否運作正常, Address bus 沒有訊號 * 2021/7/18: 將 65C02 VHDL code 下載到 QMtech Cyclone IV Starter kit 用 breadboard 接出來看訊號 * 2021/7/19: 用 Arduino Mega 2560 可以看得出 FPGA 上的 6502 power on 從 FFFC:FFFD 開始執行 之前的動作都是站在巨人的肩膀上實作, 接下來就要靠自己了. 4.1 用 FPGA 模擬 6502 CPU 到 FPGA-Based 6502 Processor in VHDL 下載檔案 失敗 改用另一個設計 OpenCores.org - cpu65c02_true_cycle 有好幾個檔案, top level 是 r65c02_tc 解壓縮後, 到目錄 cpu65c02_true_cycle/trunk/released/rtl/vhdl 下, 會有好幾個 .vhd 檔案, 找到 r65c02_tc.vhd (一開始, 有幾次在 r65c02_tc.vhd 或 core.vhd 間掙扎, 熟悉了 VHDL 的 hierarchical 架構才找到 r65c02_tc 是 top level) 參考 VHDL: Creating a Hierarchical Design with multiple entities 打開 Quartus 建立新的 project, 命名為 r65c02_tc (project 名稱得跟 r65c02_tc.vhd 定義的 entity r65c02_tc 同名) 到 Quartus 的 Processing - Start Compilation 到 Quartus 的 Assignments - Pin Planner 設定以下的 pin definition 將 I/O Standard 全部設定為 3.3-V LVTTL Pin Planner 後需要再一次 Quartus 的 Processing - Start Compilation 到 Tools 的 programmer 類似 Ben Eater 的 6502 Hello World 接上 Arduino Mega 2560, Mega 2560 接腳圖 可以看得到 6502 power on sequence 從 FFFC:FFFD 位址開始 Cyclone IV EP4CE15F23C8N 6502 CPU pin name / no. PCB PCB pin FGPA location FPGA PIN A15 / pin / output J12 33 A10 IO,DIFFIO_T14N A14 / pin J12 31 A13 FPGA J12 pin 31 的 A14 燒掉, 暫時改成 JP1 pin 6 的 B7 A13 / pin J12 29 A14 FPGA J12 pin 29 的 A13 燒掉, 暫時改成 pin 35 的 A9 A12 / pin J12 27 A15 A11 / pin J12 25 A16 A10 / pin J12 23 A17 A9 / pin J12 21 A18 A8 / pin J12 19 A19 A7 / pin J12 17 A20 A6 / pin J12 15 C17 A5 / pin J12 13 C19 A4 / pin J12 11 C20 A3 / pin J12 9 F20 A2 / pin J12 7 H20 A1 / pin J12 5 B22 A0 / pin J12 3 C22 clk_clk_i / pin / input J12 36 B9 B9 unconnected, use internal clock source clock_out irq_n_i / pin / input J12 34 B10 nmi_n_i / pin / input J12 32 B13 rdy_i / pin / input J12 30 B14 FPGA J12 pin 30 的B14 燒掉, connected to Vcc, 暫時先接到 J12 pin 24 B17 rst_rst_n_i / pin /input J12 28 B15 so_n_i / pin / input J12 26 B16 D7 / pin / input J12 18 B20 D6 / pin / input J12 16 D17 FPGA J12 pin 16 的 D17 燒掉, 暫時改成 pin 22 的 B18 D5 / pin / input J12 14 D19 FPGA J12 pin 14 的 D19 燒掉, 暫時改成 pin 20 的 B19 D4 / pin / input J12 12 D20 D3 / pin / input J12 10 F19 D2 / pin / input J12 8 H19 D1 / pin / input J12 6 B21 D0 / pin / input J12 4 C21 :———————- :—- :———– :————– :——— rd_o / pin / output JP1 5 A7 sync_o / pin / output JP1 7 A6 wr_n_o / pin / output JP1 9 A5 wr_o / pin / output JP1 11 A4 Result (Clock step debounce) JP1 13 A3 unconnected, 訊號接到 clock_out Clock T2 unconnected, debounce clock 輸入, 接到 50MHz T2 訊號 Clock 1Hz JP1 14 B3 unconnected, 訊號經過邏輯運算接到 clock_out Clock 1MHz JP1 15 B1 unconnected, 訊號經過邏輯運算接到 clock_out sw2_in JP1 13 A3 sw1_in JP1 14 B3 clock_out JP1 15 B1 Button (for step clock) JP1 16 B2 Clock_reset_n JP1 17 C1 connected to Vcc :———————- :—- :———– :————– :——— d_o[0-7] / pin / output J10 "],["-fpga-ben-eater-clock.html", "Chapter 5 用 FPGA 來模擬 Ben Eater 的可調式 clock 5.1 單獨在 FPGA 上測試 clock source 5.2 整合 65C02 CPU 跟 clock source 5.3 整合 65C02 CPU 跟 clock source 之加強版 5.4 將 clock source 獨立成一個 module", " Chapter 5 用 FPGA 來模擬 Ben Eater 的可調式 clock 5.1 單獨在 FPGA 上測試 clock source 進度: 100% 7/21 (started on 2021/7/18) * Youtube - “Hello, world” from scratch on a 6502 — by Ben Eater * Debounce circuit * Debounce circuit - VHDL - from DigiKey * Clock with various frequency * How to write a VHDL code for 1Hz signal? * intel / Altera - AN 496: Using the Internal Oscillator IP Core * 參考 How combine multiple VHDL codes to make one system 文章, 修改 vhdl 檔案如下, * 目錄 * top level vhdl, 包含 button debounce 設計 * 在 module 的 entity 定義裡面, 用到 word. 的 keyword, 參考 Synario Design Automation - VHDL Reference Manual * VHDL1Hz.vhd * VHDL1MHz.vhd 應用於 65C02 CPU 的 single step, 1Hz 都可以在 Arduino Mega 2560 上抓到精準的資料, 跑到 1MHz 時, Arduino 抓到的資料就亂了 (正常, Mega 的速度不夠快到足以處理 1MHz CPU 的頻率) * 曾經 single step 時會跳行, 嘗試了 * 加了電容到地 ==&gt; 有幫助, 但無法徹底解決 * 修改 debounce 的 stable 值, 發現值越大反而有問題, 最後用原始設定的 10ms 反而是最好….. stable_time : INTEGER := 10); --time button must remain stable in ms 5.2 整合 65C02 CPU 跟 clock source 進度: 100% 7/25 (started on 2021/7/21) 期間出現無法執行, 位址都是 0001, 嘗試 debug 了幾天 在 debug 過程中, FPGA 的 I/O Standard 改成 3.3-V LVCMOS 也行 (後來還是改回來 3.3-V LVTTL) 發現 FPGA 很燙, 似乎 Vcc 有接錯, 重新接線後, 發現還是有幾個地方可以改善 clock/reset 線路的 3.3V 電壓改由 Arduino Mega 2560 提供, 不由 QMTech 板子提供 (應該沒有較大影響) 多按幾次 FPGA 上 6502 CPU 的 reset, 才可以順利 reset 從 FFFC:FFFD 開始執行 最後發現, FPGA 的 2 個 port 被我燒掉, 換個 port 就可以順利進行. 後來, 又不行了, address 一直停留在 0001h, 原來又有幾個 port 燒掉 (其中一條是 rdy_i), 換了 port 後也好了. 有一次不小心, 發現 address 都是 0000h 時, 以為又是哪裡出問題, 原來是 Clock 線脫開了, 接回去就好了. 有一次, 把 Arduino 的 3.3V 接到地, 也都是 address 都是 0001h 5.3 整合 65C02 CPU 跟 clock source 之加強版 進度: 100% 7/27 (started on 2021/7/25) * 改用 DIP switch 來決定 clock 頻率 (1Hz / 1MHz) 或 single step * 且 clock_out 輸出, 也同時在 FPGA 內部連接至 65c02 CPU clk_clk_i Clock 選擇 Switch 1 On Off Switch 2 On Single step 1Hz Off Single step 1MHz 5.4 將 clock source 獨立成一個 module 進度: 100% 08/08 (started on 2021/08/08) * 2021/08/08 - Modulize clock source and selection "],["-65c02-cpu-rom-ram.html", "Chapter 6 整合 65C02 CPU 及 ROM / RAM 6.1 整合 65C02 CPU 及 ROM (使用 Block RAM) 6.2 整合 65C02 CPU 及 RAM (使用 FPGA IP) 6.3 整合 65C02 CPU 及 RAM (使用 QMTech 板上的 RAM) - 待完成", " Chapter 6 整合 65C02 CPU 及 ROM / RAM 6.1 整合 65C02 CPU 及 ROM (使用 Block RAM) 進度: 100% 8/4 (started on 2021/7/27) * 關於 FPGA 內部 Block RAM 資料的參考文件: FPGA design usin VHDL - ROM implementation using block RAM * Altera 建議使用內建的 IP, 透過 Quartus 的 MegaWizard Plug-In Manager, 使用 library of parameterized modules (LPM) 及 Soft IP MegaWizard Plug-In Manager, 但是遇到了幾個問題: * 在 Quartus 的 menu - edit 無法找得到 MegaWizard Plug-In Manager. 解決方式: 選 menu - Tools - IP Catalog, 會在主畫面右側顯示 IP Catalog 子畫面, 選擇 (double click) Installed IP - Library - On Chip Memory - ROM 1-PORT * 選擇 VHDL * 選擇檔案儲存的目錄, 輸入檔案名稱, 要注意檔案名稱, 有錯誤時會提示 (我輸入 r65c02_rom_8kb.vhd) * 這時候電腦反應很慢, 甚至當機, 查到intel 網頁說明 - MegaWizard extremely slow and unstable # 原來執行 $ quartus # 或是執行 $ /home/ubuntu/intelFPGA_lite/20.1/quartus/bin/quartus # 會造成 MegaWizard 出問題, 應該改用以下執行方式 $ ssh -Y /home/ubuntu/intelFPGA_lite/20.1/quartus/bin/quartus # 但是執行時, 出現問題 connect to host localhost port 22: Connection refused # 這時候, 重新安裝一次 ssh $ sudo apt-get install ssh # 再執行一次 $ ssh -Y /home/ubuntu/intelFPGA_lite/20.1/quartus/bin/quartus $ 接下來, 設定 ROM: 1-PORT how wide: 8 bits how many 8-bits (menu 會隨著上一個設定而更新) words of memory: 32768 words 參考前面的 Apple II ROM Listings 的 APPLE2.ROM \\(C000-\\)FFFF 需要用到 20KB (還不清楚如何設定將 20KB 的資料映射到對的位址, 因為 Quartus 是先填 20KB, 再將其餘補零, 我們需要在前面的 12KB 補零, 20KB 的資料留在最後) Quartus 需要 ROM 的 hex 檔案是 intel hex 格式, 找到了個轉換程式 ARM Keil - BINARY to Intel HEX Converter Utility BIN2HEX.EXE 但只能在 Windows XP 下執行, 只得根據 How to Download and Install Windows XP for Free, 在 VirtualBox 建立個 Windows XP 的 VM, 雖然網路設定不通, 我只需要設定 shared folders 將 BIN2HEX.EXE 及 APPLE2.ROM 在 Windows XP 上執行即可產生 APPLE2.HEX. 因為 APPLE2.ROM 只有 20KB, 而 Quartus 上的 ROM 只能選 32KB, 因此 Quartus 會先把 APPLE2.ROM 的 20KB 填在前面, 後面補 0. 而我們需要的是前面補 0. 因此, 先修改 APPLE2.ROM, 先補上 12KB 的 0, 再執行一次 BIN2HEX.EXE, 這樣就對的上了. 執行 single step 時, 發現 CPU 讀到 ROM 的 data 會慢半拍, 原來, 我 ROM 的 clock 跟 CPU clock 一致造成的, 把 ROM 的 clock 拉到 FPGA 主頻率的 50MHz clk 來解決這問題. 照 Apple II 的 ROM 逐步執行, 發現 CPU 在 return 時, 跳到 0000h 的位址, 以為是哪裡有問題, 才注意到 jsr 的時候, CPU 先將目前的位址 push 到 1FF 的位置 (一開始還懷疑 CPU 的 soft core 設計有問題, 錯怪了), 但是我還沒有裝 RAM, return 時讀回來的是 0000h, 接下來就是安裝 RAM 了. ## 將 ROM data out 與 CPU data_in, data_out 連接, 且設定為 tri-state 進度: 100% 08/08 (started on 2021/08/05) * 2021/08/08 - Connectoring CPU data_out and data_in with tri-state 6.2 整合 65C02 CPU 及 RAM (使用 FPGA IP) 進度: 100% 8/21 (started on 2021/8/4) * 本來是想使用 QMTech 上的 DRAM, 看來幾天, 還是看不懂. * 發現 FPGA 也是可以實現 RAM 的功能 (而且不需要設計 DRAM 必要的 refresh 線路), 參考intel VHDL Single Port RAM 設計 * 還沒搞清楚 single port 跟 dual port 的差異 (有 read/write 2 個 address port) * 也沒搞清楚 synchronous 跟 asynchronus 的差異 * 先試範例的 single port ram * 稍微改選範例程式, 因為原始程式 addr 的設定是 unsigned integer, * 關於 VHDL Predefined Types from the package standard * Integer : signed value * Natural : unsigned value starting at 0 * Positive: unsigned value starting at 1 修改範例參考 FGPA4Student VHDL code for single port RAM, addr: in natural range 0 to 32767; -- 應該是配合 RAM 使用的定址方式 以 0 開始的 unsigned integer type -- 改成以下 addr: in std_logic_vector(14 downto 0); -- 存取到 ram 時, 需要做 type 轉換 ram(addr) &lt;= data; -- 從 std_logic_vector 轉成 unsigned integer ram(to_integer(unsigned(addr))) &lt;= data; 如果是倒過來, 應該用這個 function, # 不過, 我自己還沒驗證過. my_vector &lt;= std_logic_vector(to_unsigned(my_int, my_vector&#39;length))); 整合進 r65c02_tc 時, Quartus 報錯, 無法容納 RAM size (32768 Bytes x 8 bits), 改成 16384 Bytes 2021/08/21 - Adding FPGA RAM -32768-Bytes x 8 bit FGPA 容量不夠 ==&gt; 16384Bytes x 8 bits 6.3 整合 65C02 CPU 及 RAM (使用 QMTech 板上的 RAM) - 待完成 進度: 0% 8/21 (started on 2021/8/21) * 把 FPGA 當 RAM 應該是太浪費了, (需要去了解 FPGA 做成 RAM 需要多少個 gates), 只能塞 16KBytes 的 RAM, 而 Apple II 需要 32KB RAM, 所以, 還是得試試用 QMTech 上的 RAM "],["appendixa.html", "A Appendix A - Apple II 及 6502 CPU 相關資源", " A Appendix A - Apple II 及 6502 CPU 相關資源 github - Eiroca - Awesome List of Apple II resources Apple II emulator on MacOS Open Emulator - Apple II BASIC on MacOS 下載 OpenEmulator.app 執行 OpenEmulator.app 後, 選擇 Apple II plus (或其它), 會顯示以下螢幕 左上角有幾個選擇: Power Down, Sleep, Wake Up, Reset. 選擇 Reset 會進入 BASIC, 可以開始寫 BASIC 程式 可以參考Apple BASIC 範例程式 - 包含簡單繪圖 : 這網頁最後還有幾個連結, 包含 The Applesoft Tutorial, Applesoft BASIC Programming Reference Manual. 這個網站對於 Apple BASIC 提供很好的入門, 擔心他後續不維護這網頁, 就把這網頁存下來, 建立個 mirroring site Apple II emulator 如何在網頁上撰寫 Apple BASIC 網頁模擬 Apple IIjs Applesoft BASIC in Javascript 也是不錯的入門網站, 也包含許多示範程式, 及 6502 assembly 網頁 AppleLogic.org Apple Documents - Programming - BASIC : 不只是 BASIC, 裡面有完整的 Apple 相關資料, 包括 source code, 硬體線路圖, 各種 CPU 及各種語言如 PASCAL、FORTRAN 等, 可以說是 Apple 的藏寶圖 Local mirroring - BASIC : 只有部分存檔 github - Apple II System Software Source Code Apple II ROM listings * Source code for Apple II series System Software and DOS * github source code * Jon Relay’s Apple II Info Archives - memory map Apple II and II+ memory map RAM - 48KB ($0000 - $BFFF) $0000 - $00FF (0 - 255) &lt;1KB: Zero Page $0100 - $01FF (256 - 511) &lt;1KB: 6502 Processor Stack $0200 - $02FF (512 - 767) &lt;1KB: GETLN Line Input Buffer $0300 - $03CF (768 - 975) &lt;1KB: Free Space for Machine Language, Shape Table, etc. $03D0 - $03FF (976 - 1023) 1KB: DOS, ProDOS, and Interrupt Vectors $0400 - $07FF (1024 - 2047) 1KB: Text Video Page and Peripheral Screenholes $0800 - $0BFF (2048 - 3071) 2KB: Text Video Page 2 or Applesoft Program and Variables $0C00 - $1FFF (3072 - 8191) 5KB: Free Space for Machine Language, Shapes, etc. (might be overwritten if you use a lot of variables or BASIC program is long) $2000 - $3FFF (8192 - 16383) 8KB: High Resolution Graphics Page 1 $4000 - $5FFF (16384 - 24575) 8KB: High Resolution Graphics Page 2 $6000 - $95FF (24576 - 38399) 14KB: Applesoft String Data (may have a little space free) (some BASIC programs move the variables all the way up to $4000 or even $6000) IO - 4KB $C000 - $CFFF 4KB: Mainboard I/O and peripheral slot ROM ROM - 12KB ($D000 - $FFFF) $D000 - $F7FF (53248 - 63487) 10KB: Applesoft Interpreter $F800 - $FFFF (63488 - 65535) 2KB: System Monitor A trip down memory lane - Apple II Memory Map ROM 的內容參考 Apple II ROM Disassembly 裡面 “download the project file .ZIP” 或是 local 存檔, 存檔目錄 - APPLE2.ROM James Davis created a detailed disassembly of the Apple II+ ROM that covers the full span, from \\(C000-\\)FFFF Apple II 歷史 * Apple II history.org * APPLE II DOS SOURCE CODE By Leonard J. Shustek | November 12, 2013 6502 CPU * Build an 8-bit computer from scratch - by Ben Eater * Ben Eater’s blog and shop to sell 8-bit breadboard computer kits * Book - on line - Digital Computer Electronics by Albert Paul Malvino * Book - Downloads - Digital Computer Electronics by Albert Paul Malvino DigitalComputerElectronicsByAlbertPaulMalvino.pdf * 6502 CPU power on * Youtube - 6502 hello world by Ben Eater * CPU - WDC 65C02S 官網及相關資料 * W65C02 data sheet * EEPROM - ATMEL AT28C256 * ATMEL AT28C256 data sheet - 原廠網頁 * ATMEL AT28C256 data sheet - local 存檔 * RAM - * * Clock module * Ben Eater Clock module manual copy .pdf * Ben Eater Clock module manual copy .jpg * Youtube - Clock module using timer 555 * Youtube 中提及 1MHz Oscillator 的接腳圖 1MHz Osc 接腳圖 pin 定義 pin 定義 Remark 14 +VCC 8 1MHz output 1 NC/Enable 7 GND 我將 pin 1 接 330Ohm 到 Vcc 以下照片版權屬於 Ben Eater 65Cx2 core by A.Daly Visual Transistor-level Simulation of the 6502 CPU NOT Open Source - Design-Reuse IP’s Embedding a 6502 in an FPGA - seems not completed Google keyword: fpga 6502 cpu and c and assembly Retro-Computer Retrocomputer on a FPGA MCL64 – WORLD’S FASTEST COMMODORE 64 MOUSE2Go - A 6502 computer emulated by an Arduino KIM Uno - a 6502 KIM-1 Computer on Arduino 6800 CPU * Youtube - Building a 6800 CPU on an FPGA with nMigen * github - Building a 6800 CPU on an FPGA with nMigen * nMigen tutorial by Robert Baruch 8 bit MCU * A complete 8-bit Microcontroller in VHDL - FPGA4Student "],["appendixb.html", "B Appendix B", " B Appendix B "]]
