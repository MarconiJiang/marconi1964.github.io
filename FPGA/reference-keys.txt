前言
fpga-入門-hello-world-程式---點亮-led
硬體準備
安裝-intel-altera-ide-quartus-於-ubuntu-18.04
安裝-altera-ide-quartus-設定及遇到的問題
安裝-device-我們在安裝-quartus-已經安裝過了-如果需要重新安裝時-選擇-quartus-menu-tools---install-devices
建立新專案-quartus-menu-選擇-file---new-project-wizard-一步步執行
建立新檔案-quartus-menu-選擇-file---new-後-再選擇-design-files---vhdl-file-點選-ok-即可-會出現-vdhl1.vhd-這個檔案-可以自行改名稱後儲存.
輸入-vhdl-檔案內容
vhdl-檔案內容建立完成後-進入-quartus-menu-的-processing---start-compilation-來編譯程式-編譯結果沒有-error-但有不少-warning-不妨礙.
確認腳位-quartus-menu-選取-assignment---pin-planner-會出現類似下圖-這次需要設定-location-我們這次用到-led0-跟-pb-push-button-按鍵的意思-需要設定這-2-個-node-的-location
再編譯一次-processing---start-compilation
燒錄-quartus-menu-選擇-tools---programmer
bonus-1-轉檔-從-vhdl-檔案轉成-verilog-格式-程式下載點-httpdoolittle.icarus.comlarryvhd2vl
bonus-2-後來才發現-intel-有個-youtube---how-to-begin-a-simple-fgpa-design-比較完整-也比較複雜了點-其實省略一些還是可以動作-我的文章只有文字-可以配合這-youtube-會更清楚
running-linux-on-fpga-vexriscv-cpu-implementation
準備工作
軟體安裝
軟體介紹
適用開發板
預備安裝
pre-built-bitstreams-跟-linuxopensbi-images
安裝-litex
安裝-migenlitex-及-litexs-核心
更新-第一次安裝可省略
安裝-risc-v-toolchain-如果想要的話-testcreate-a-soc-with-a-cpu
build-開發板
安裝及在筆電上測試-litex-我們可以安裝-在筆電上模擬測試
安裝-risc-v-toolchain
安裝-openocd-做硬體測試時需要-所以我們需要安裝
執行-litex-模擬
安裝-spinalhdl-需要安裝-java-sdk-跟-scala-的-sbt
執行模擬
在硬體上測試
build-fpga-bitstream
load-fpga-bitstream
load-linux-images-透過-serial-port-到-fpga-板
option-選項---configureuse-the-peripherals
創建-linux-binaries-optional
創建-opensbi-binary-optional
創建-vexriscv-linux-variant-optional-我跳過這部分
udev-rules-optional-我跳過這部分
appendixa
appendixb
