[["index.html", "TensorFlow Lite for Microcontroller (TFLM) Chapter 1 前言", " TensorFlow Lite for Microcontroller (TFLM) Marconi Jiang 2021-03-24 Chapter 1 前言 自從 2020 年參加了台灣人工智慧學校的第一屆 Edge AI 技術專班後, 對於 edge AI 比較有點概念, 重讀 TinyML：TensorFlow Lite機器學習 一書, 於 2021 春節期間比較有空時, 找出手上的 STM32 NUCLEO_F103RB 板子, 確認程式的可行性, 分享在 FB 的 Edge AI Taiwan邊緣智能交流區, 後續有臉友聯繫, 希望可以跟學生分享, 就開始了 TensorFlow Lite for Microntroller 更深入的探討, 同時, 也開啟了對 TensorFlow open source 的小小貢獻. 附註 : 本書的 pdf 版本下載設定有問題, 無法顯示中文, 需要修改 bookdown 設定吧, 待研究. "],["chap-intro.html", "Chapter 2 Introducing TensorFlow Lite for Microcontroller (TFLM)", " Chapter 2 Introducing TensorFlow Lite for Microcontroller (TFLM) Google 推出 TensorFlow 框架, 可以在 CPU/GPU/TPU 上執行 training 的任務, 考慮手機上的侷限的運算能力不如 PC, 接著推出 Tensorflow Lite 的機器學習框架於手機, 至於 IoT 裝置上用的是 ARM M 系列及其它 embedded MCU (microcontrollers) 的算力以及侷限的 ROM/RAM 空間, 也針對這類型的開發板陸續推出支援機器學習 inference 的 TensorFlow Lite for Microcontrollers (TFLM) 框架, 也出書推廣 TinyML：TensorFlow Lite 機器學習. 截至本書出版（2021-03-24）為止, TFLM 支援的硬體已經有下列的開發板 (書中只有介紹前三種): Arduino Nano 33 BLE Sense SparkFun Edge STM32F746 Discovery kit Adafruit EdgeBadge Adafruit TensorFlow Lite for Microcontrollers Kit Adafruit Circuit Playground Bluefruit Espressif ESP32-DevKitC Espressif ESP-EYE Wio Terminal: ATSAMD51 Himax WE-I Plus EVB Endpoint AI Development Board Synopsys DesignWare ARC EM Software Development Platform 而介紹的範例則有 Hello World - 示範 TensorFlow Lite for Microcontrollers 的基本功能, 用機器學習的 inference 來推算出 sine 的值 Tutorial using any supported device Micro speech - 從麥克風接收語音, 偵測 wake words: “yes,” “no,” “silence” 及 “unkown” Tutorial using SparkFun Edge Magic wand - 讀取 accelerometer 資料來判斷並區分 3 種不同手勢 Tutorial using Arduino Nano 33 BLE Sense Person detection - 讀取 camera 的影像資料來偵測是否有人出現在精通前 而我在本書出版時, 已經實驗過的板子及範例有, 因為 TensorFlow Lite Micro 的核心程式及 Make 環境的開發持續進行中, 程式的更新過程會造成部分來不及更新的內容及操作產生錯誤, 尤其是 STM32 相關的設定參數, 著實花了一些時間, 並且發 PR 到 TFLM github 更新. * Hello World : STM32 NUCLEO-F03RB, DISCO-F746NG, Arduino Nano 33 BLE Sense * Micro speech : DISCO-F746NG, Arduino Nano 33 BLE Sense * Magic wand : Arduino Nano 33 BLE Sense * Person detection : Not yet （標的物 Arduino Nano 33 BLE Sense, ESP32-EYE） 從實驗的結果而言, 辨識的效果還有很大的改善空間, 這就當作下一個探討的題目吧. "],["prerequisite-.html", "Chapter 3 Prerequisite 準備工作 3.1 git 及 github 簡單操作 3.2 在 Windows 10 下安裝 VMware Workstation Player 及 Ubuntu 18.04", " Chapter 3 Prerequisite 準備工作 3.1 git 及 github 簡單操作 3.2 在 Windows 10 下安裝 VMware Workstation Player 及 Ubuntu 18.04 本篇文章說明如何在 Windows 10 上安裝虛擬機器, 執行 Linux - Ubuntu 系統, 以便編譯 TensorFlow Lite Micro 在 STM32 DISCOVERY_F476NG 板子上執行的測試程式 3.2.1 0. 事先準備 0.1 需要一個 email 位址作為網站下載軟體之註冊用, 0.2 需要在 github.com 上面開個帳號, 對以後的軟體開發會有幫助 3.2.2 1. 下載 Ubuntu 18.04 ISO image 檔案 （電腦需要至少 20GB 以上硬碟空間, 預估下載時間： 7 分鐘） https://releases.ubuntu.com/18.04/ 選擇 ubuntu-18.04.5-desktop-amd64.iso 下載, 記住儲存目錄 3.2.3 2. 下載及安裝 VMWare Workstation Player (預估下載時間： &lt; 1 分鐘 / 操作時間：10 分鐘) 2.1 下載 VMWare Workstation Player 安裝程式檔案 https://www.vmware.com/products/workstation-player/workstation-player-evaluation.html 2.2 執行 VMWare Workstation Player 安裝程式 安裝完成後, 執行 VMware Workstation Player 2.3 Create a new virtual machine. 點選 ‘Installer disc image file (iso),’ 到儲存 ubuntu-18.04.5-desktop-amd64.iso 的目錄後, 開始安裝 *** 以上 2 個動作在上課前完成 *** 3.2.4 3. 安裝套件之準備工作 (以下步驟 3 - 7 約需時 30 分鐘 ) 進入 Ubuntu OS 後, 打開 terminal 檔案 要記得 Ubuntu 的密碼, 執行 sudo 後需要輸入 $ sudo apt update $ sudo apt install -y git curl mercurial python2.7 python-pip python3-pip build-essential screen # Python2 跟 Python3 都會用的到, 用不同的指令來區分 : python 會指向 Python2; python3 會指向 Python3 (不要問我問甚麼會同時用到 2 個不同版本, 不同的開發團隊, 習慣的作法不同) 3.2.5 4. 安裝 ARM mbed-os command line 編譯程式 mbed-cli 參考文章 mbed-cli installation $ pip install mbed-cli 3.2.5.1 4.1 設定 mbed 目錄路徑(path) $ sudo find / -name mbed $ vi ~/.bashrc # 在 .bashrc 檔案的最後一行 按鍵指令 &#39;a&#39; (append) 加上以下內容, 記得, 不要加上 /mbed export PATH=$PATH:/path/to/mbed/you/find # 我自己的例子是 export PATH=$PATH:/home/ubuntu/.local/bin # 結束後, 按鍵 &#39;:wq!&#39; 來儲存 $ source ~/.bashrc $ mbed --version # 測試是否正確執行 3.2.6 5. 安裝 ARM GCC compiler (編譯器) 參考文件 GNU Arm Embedded Toolchain # 第一步: 在 Ubuntu OS 內, 打開 terminal 並輸入 $ sudo add-apt-repository ppa:team-gcc-arm-embedded/ppa # 按 &#39;enter&#39; 繼續 # 第一步: 更新 apt $ sudo apt update # 第三步: 安裝 gcc-arm toolchain $ sudo apt install -y gcc-arm-embedded # 設定 mbed 目錄路徑(path) $ vi ~/.bashrc # 在 .bashrc 檔案的最後一行 按鍵指令 &#39;a&#39; (append) 加上以下內容 export GCC_ARM_PATH=/usr/bin/arm-none-eabi-gcc # 結束後, 按鍵 &#39;:wq!&#39; 來儲存 $ source ~/.bashrc # 安裝完成, 測試是否正確執行 $ gcc --version # 第四步: 安裝 Arm Compiler 5 到 64-bit Linux 系統時, 需要安裝 i386 architecture package $ sudo dpkg --add-architecture i386 $ sudo apt update $ sudo apt install -y libc6:i386 libncurses5:i386 libstdc++6:i386 3.2.7 6. 下載 TensorFlow Lite for Microcontroller (TFLM) # clone from tensorflow github $ git clone -b example --depth 1 https://github.com/marconi1964/tensorflow.git 3.2.8 7. 下載 STM32-F 系列工具箱 7.1 更新 STM32-F 板子的 ST-LINK firmware 到最新版 https://my.st.com/content/my_st_com/en/products/development-tools/software-development-tools/stm32-software-development-tools/stm32-programmers/stsw-link007.html Linux Ubuntu 版本 $ cd stsw-link007/AllPlatforms/StlinkRulesFilesForLinux $ sudo apt update $ sudo dpkg -i st-stlink-udev-rules-1.0.2-2-linux-all.deb 7.2 下載 CoolTerm 程式 https://freeware.the-meiers.org/ 也可以用步驟 3 已經安裝好的 cli 指令 screen, screen 是比較炫技的方法, CoolTerm 對不熟 Linux 環境的人比較 friendly 3.2.9 8. 開始執行 TensorFlow Lite for Microcontroller 程式 見下一章範例 - Hello World 3.2.10 參考文件 關於 Make 及 Makefile &gt; - 取消 TAGS 程式不受影響 &gt; - STM32F 選用 OPTIMIZED_KERNEL_DIR=cmsis_nn 來做最佳化 英文參考文章 &gt; - mbed-cli v6.7 installation &gt; - mbed-cli v5.15 manual installation &gt; - Build Arm Cortex-M voice assistant with Google TensorFlow Lite &gt; - CMSIS - Cortex Microcontroller Software Interface Standard &gt; - STM32F10x Standard Peripherals Library Peripheral’s Drivers Description &gt; - what means about “-DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER” as the flags of arm-none-eabi-gcc? "],["chap-hello-world.html", "Chapter 4 Hello world 示範程式 4.1 ", " Chapter 4 Hello world 示範程式 4.1 "],["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],["references.html", "References", " References "]]
